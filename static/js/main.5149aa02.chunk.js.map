{"version":3,"sources":["components/Tempapp.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","Tempapp","useState","city","setCity","weather","setWeather","wind","setWind","countrycode","setCountryCode","cordinates","setCordinates","search","setSearch","useEffect","a","url","process","fetch","response","json","data","main","sys","coord","fetchApi","className","type","placeholder","value","onChange","e","target","temp","temp_min","temp_max","feels_like","humidity","description","speed","toFixed","country","lon","lat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAGAA,EAAQ,IAAUC,SAElB,IA4FeC,EA5FC,WAAO,IAAD,EACIC,mBAAS,MADb,mBACbC,EADa,KACPC,EADO,OAEUF,mBAAS,MAFnB,mBAEbG,EAFa,KAEJC,EAFI,OAGIJ,mBAAS,MAHb,mBAGbK,EAHa,KAGPC,EAHO,OAIkBN,mBAAS,MAJ3B,mBAIbO,EAJa,KAIAC,EAJA,OAKgBR,mBAAS,MALzB,mBAKbS,EALa,KAKDC,EALC,OAMQV,mBAAS,iBANjB,mBAMbW,EANa,KAMLC,EANK,KAuBpB,OAfAC,qBAAU,YACM,uCAAG,gCAAAC,EAAA,6DACTC,EADS,2DACiDJ,EADjD,+BAC8EK,oCAD9E,SAEQC,MAAMF,GAFd,cAETG,EAFS,gBAGIA,EAASC,OAHb,OAGTC,EAHS,OAIflB,EAAQkB,EAAKC,MACbjB,EAAWgB,EAAKjB,SAChBG,EAAQc,EAAKf,MACbG,EAAeY,EAAKE,KACpBZ,EAAcU,EAAKG,OARJ,4CAAH,qDAWdC,KACC,CAACb,IAGF,qCACE,sBAAKc,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,uBACEC,KAAK,SACLC,YAAY,qBACZF,UAAU,aACVG,MAAOjB,EACPkB,SAAU,SAACC,GACTlB,EAAUkB,EAAEC,OAAOH,YAKzB,qBAAKH,UAAU,WAAf,SACE,+BACE,mBAAGA,UAAU,cADf,+BAKAxB,EAGA,gCACE,sBAAKwB,UAAU,OAAf,UACE,qBAAIA,UAAU,WAAd,UACE,mBAAGA,UAAU,sBACZd,KAEH,qBAAIc,UAAU,OAAd,UAAsBxB,EAAK+B,KAA3B,aACA,qBAAIP,UAAU,cAAd,mBACSxB,EAAKgC,SADd,mBACqChC,EAAKiC,SAD1C,aAGA,qBAAIT,UAAU,aAAd,wBAAuCxB,EAAKkC,WAA5C,aACA,qBAAIV,UAAU,WAAd,wBAAqCxB,EAAKmC,SAA1C,OACCjC,EACC,qBAAIsB,UAAU,cAAd,mCACyBtB,EAAQ,GAAGkC,eAElC,KACHhC,EACC,qBAAIoB,UAAU,aAAd,2BAC8B,IAAbpB,EAAKiC,OAAaC,QAAQ,GAD3C,UACsD,IACnDlC,EAAKiC,MAFR,UAIE,KACH/B,EACC,qBAAIkB,UAAU,eAAd,4BACkBlB,EAAYiC,WAE5B,KACH/B,EACC,qBAAIgB,UAAU,aAAd,yBACehB,EAAWgC,IAD1B,iBAC6ChC,EAAWiC,OAEtD,QAEN,qBAAKjB,UAAU,YApCjB,mBAAGA,UAAU,WAAb,2CAwCJ,qBAAKA,UAAU,UAAf,SACE,yFCpFOkB,MAJf,WACE,OAAQ,cAAC,EAAD,KCQKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5149aa02.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./css/style.css\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nconst Tempapp = () => {\r\n  const [city, setCity] = useState(null);\r\n  const [weather, setWeather] = useState(null);\r\n  const [wind, setWind] = useState(null);\r\n  const [countrycode, setCountryCode] = useState(null);\r\n  const [cordinates, setCordinates] = useState(null);\r\n  const [search, setSearch] = useState(\"Visakhapatnam\");\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setCity(data.main);\r\n      setWeather(data.weather);\r\n      setWind(data.wind);\r\n      setCountryCode(data.sys);\r\n      setCordinates(data.coord);\r\n    };\r\n\r\n    fetchApi();\r\n  }, [search]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"box\">\r\n        <div className=\"inputData\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"Enter city name...\"\r\n            className=\"inputField\"\r\n            value={search}\r\n            onChange={(e) => {\r\n              setSearch(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"sun-icon\">\r\n          <h1>\r\n            <i className=\"fa fa-sun\"></i> Sunshine - Weather App\r\n          </h1>\r\n        </div>\r\n\r\n        {!city ? (\r\n          <p className=\"errorMsg\">No data found üò¢</p>\r\n        ) : (\r\n          <div>\r\n            <div className=\"info\">\r\n              <h2 className=\"location\">\r\n                <i className=\"fa fa-street-view\"></i>\r\n                {search}\r\n              </h2>\r\n              <h3 className=\"temp\">{city.temp}¬∞Cel</h3>\r\n              <h3 className=\"tempmin_max\">\r\n                Min : {city.temp_min}¬∞Cel | Max : {city.temp_max}¬∞Cel\r\n              </h3>\r\n              <h3 className=\"feels-like\">Feels like {city.feels_like}¬∞Cel</h3>\r\n              <h3 className=\"humidity\">Humidity : {city.humidity}%</h3>\r\n              {weather ? (\r\n                <h3 className=\"weatherdesc\">\r\n                  Weather Description : {weather[0].description}\r\n                </h3>\r\n              ) : null}\r\n              {wind ? (\r\n                <h3 className=\"wind-speed\">\r\n                  Wind Speed : {(wind.speed * 3.6).toFixed(2)} kmph /{\" \"}\r\n                  {wind.speed} mps\r\n                </h3>\r\n              ) : null}\r\n              {countrycode ? (\r\n                <h3 className=\"country-code\">\r\n                  Country Code : {countrycode.country}\r\n                </h3>\r\n              ) : null}\r\n              {cordinates ? (\r\n                <h3 className=\"cordinates\">\r\n                  Longitude : {cordinates.lon} | Latitude : {cordinates.lat}\r\n                </h3>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"wave\"></div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"crafted\">\r\n        <h3>Crafted with ‚ù§Ô∏è by Shubham üòÑ</h3>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tempapp;\r\n","import \"./App.css\";\nimport Tempapp from \"./components/Tempapp\";\n\nfunction App() {\n  return (<Tempapp />) ;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}